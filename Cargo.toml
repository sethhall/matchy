[package]
name = "matchy"
version = "1.0.1"
edition = "2021"
authors = ["Seth Hall <seth@remor.com>"]
license = "BSD-2-Clause"
description = "Fast database for IP address and pattern matching with rich data storage"
repository = "https://github.com/sethhall/matchy"
readme = "README.md"
keywords = ["ip", "pattern", "database", "geoip", "matching"]
categories = ["network-programming", "database", "algorithms"]
include = [
    # Source code
    "src/**/*",
    "benches/**/*",
    "examples/**/*",
    "tests/*.rs",
    "tests/*.c",
    "include/**/*",
    
    # Build configuration
    "build.rs",
    "cbindgen.toml",
    "Cargo.toml",
    "Cargo.lock",
    
    # Documentation
    "README.md",
    "CHANGELOG.md",
    "CONTRIBUTING.md",
    "LICENSE",
]

# cargo-c configuration for C/C++ library installation
[package.metadata.capi]
min_version = "0.10.0"

[package.metadata.capi.header]
name = "matchy"
subdirectory = "matchy"  # Install headers to <prefix>/include/matchy/
generation = true        # Use cbindgen to generate headers

[package.metadata.capi.install.include]
# Install additional headers from the include directory  
asset = [{from = "include/matchy/maxminddb.h"}]

[package.metadata.capi.pkg_config]
name = "matchy"
filename = "matchy"
# Override Cflags to point to includedir, not includedir/matchy
# This allows #include <matchy/matchy.h> to work correctly
strip_include_path_components = 1

[lib]
name = "matchy"
crate-type = ["rlib", "staticlib", "cdylib"]

[features]
# cargo-c requires a capi feature to identify C-compatible libraries
capi = []
# Enable dhat heap profiling in benchmarks (dhat is always available as dev-dep)
dhat-heap = []

[[bin]]
name = "matchy"
path = "src/bin/matchy.rs"

[dependencies]
# Keep minimal initially - add as needed
libc = "0.2"
memmap2 = "0.9.8"
zerocopy = { version = "0.8.27", features = ["derive"] }  # Safe binary format access
clap = { version = "4.5", features = ["derive", "cargo"] }
idna = "1.0"  # Unicode domain (IDN) to punycode conversion
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
anyhow = "1.0"
rustc-hash = "2.0"  # Fast FxHash for literal pattern lookups
xxhash-rust = { version = "0.8", features = ["xxh64"] }  # Stable XXH64 for on-disk hashing
csv = "1.3"
memory-stats = "1.2"  # For tracking memory usage during builds
lru = "0.12"  # LRU cache for query results
memchr = "2.7"  # SIMD-accelerated byte searching
rayon = "1.10"  # Parallel sort for large hash builds
boomphf = { version = "0.6.0", features = ["parallel", "serde"] }
bincode = "1.3"
[target.'cfg(windows)'.dependencies]
winapi = { version = "0.3", features = ["winsock2", "ws2def", "ws2ipdef"] }

[dev-dependencies]
# Testing dependencies
criterion = "0.7"
proptest = "1.4"
tempfile = "3.8"
rand = "0.9"
dhat = "0.3"  # Heap profiling for benchmarks

[build-dependencies]
cbindgen = "0.29"

[profile.release]
opt-level = 3
lto = true
codegen-units = 1
strip = false  # Keep symbols for debugging initially
debug = true   # Enable debug info for profiling

[profile.dev]
opt-level = 0
debug = true

[profile.bench]
inherits = "release"

[[bench]]
name = "matchy_bench"
harness = false

[[bench]]
name = "cache_bench"
harness = false

# MMDB database building benchmark (tests deduplication optimization)
[[bench]]
name = "mmdb_build_bench"
harness = false

# Memory profiling tool (not a Criterion benchmark)
[[bench]]
name = "query_profile"
path = "benches/query_profile.rs"
harness = false
