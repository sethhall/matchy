name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build-release:
    name: Build Release
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: libparaglob_rs.so
            asset_name: libparaglob_rs-linux-x86_64.so
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: libparaglob_rs.a
            asset_name: libparaglob_rs-linux-x86_64.a
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: libparaglob_rs.dylib
            asset_name: libparaglob_rs-macos-x86_64.dylib
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: libparaglob_rs.dylib
            asset_name: libparaglob_rs-macos-aarch64.dylib
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: paraglob_rs.dll
            asset_name: paraglob_rs-windows-x86_64.dll
    steps:
      - uses: actions/checkout@v5
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Build release
        run: cargo build --release --target ${{ matrix.target }}
      
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream
