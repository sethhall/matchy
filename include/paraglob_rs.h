/* Auto-generated by cbindgen - DO NOT EDIT */

#ifndef PARAGLOB_RS_H
#define PARAGLOB_RS_H

/* Generated with cbindgen:0.26.0 */

/* WARNING: This file is auto-generated. Manual changes will be lost. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

#ifdef __cplusplus
namespace paraglob_rs {
#endif // __cplusplus

/*
 Error codes for C API
 */
typedef enum paraglob_error_t {
  /*
   Operation succeeded
   */
  paraglob_error_t_PARAGLOB_SUCCESS = 0,
  /*
   File not found
   */
  paraglob_error_t_PARAGLOB_ERROR_FILE_NOT_FOUND = -1,
  /*
   Invalid file format
   */
  paraglob_error_t_PARAGLOB_ERROR_INVALID_FORMAT = -2,
  /*
   Corrupt data
   */
  paraglob_error_t_PARAGLOB_ERROR_CORRUPT_DATA = -3,
  /*
   Out of memory
   */
  paraglob_error_t_PARAGLOB_ERROR_OUT_OF_MEMORY = -4,
  /*
   Invalid parameter
   */
  paraglob_error_t_PARAGLOB_ERROR_INVALID_PARAM = -5,
  /*
   File too small
   */
  paraglob_error_t_PARAGLOB_ERROR_FILE_TOO_SMALL = -6,
  /*
   I/O error
   */
  paraglob_error_t_PARAGLOB_ERROR_IO = -7,
} paraglob_error_t;

/*
 Opaque database handle for C API

 This wraps both the MmapFile and the Paraglob instance.
 */
typedef struct paraglob_db {
  uint8_t _private[0];
} paraglob_db;

/*
 Opaque builder handle for C API

 Used for incrementally building a pattern database.
 */
typedef struct paraglob_builder {
  uint8_t _private[0];
} paraglob_builder;

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

/*
 Open database from file using memory mapping

 Opens and validates a paraglob file, returning a handle that can be used
 for queries. The file is memory-mapped for efficient zero-copy access.

 # Parameters
 * `filename` - Path to the paraglob file (null-terminated C string)

 # Returns
 * Non-null pointer on success
 * NULL on failure

 # Safety
 * `filename` must be a valid null-terminated C string

 # Example
 ```c
 paraglob_db* db = paraglob_open_mmap("patterns.pgb");
 if (db == NULL) {
     fprintf(stderr, "Failed to open database\n");
     return 1;
 }
 ```
 */
struct paraglob_db *paraglob_open_mmap(const char *filename);

/*
 Open database from memory buffer (zero-copy)

 Creates a database handle from a memory buffer containing pattern data
 in binary format. No data is copied - the database operates directly
 on the provided buffer.

 # Parameters
 * `buffer` - Pointer to pattern data in memory (binary format)
 * `size` - Size of buffer in bytes

 # Returns
 * Non-null pointer on success
 * NULL on failure

 # Safety
 * `buffer` must be valid for the lifetime of the returned handle
 * Caller must not modify or free buffer while handle exists

 # Example
 ```c
 uint8_t* data = ...; // Load from somewhere
 size_t size = ...;
 paraglob_db* db = paraglob_open_buffer(data, size);
 if (db == NULL) {
     fprintf(stderr, "Failed to open from buffer\n");
     return 1;
 }
 // Use db...
 paraglob_close(db);
 // Now you can free data
 ```
 */
struct paraglob_db *paraglob_open_buffer(const uint8_t *buffer, uintptr_t size);

/*
 Close database and free all resources

 Closes the memory-mapped file and frees all associated resources.
 After this call, the handle is invalid and must not be used.

 # Safety
 * `db` must be a valid handle returned from `paraglob_open_mmap`
 * `db` must not be used after this call
 * Calling with NULL is safe (no-op)

 # Example
 ```c
 paraglob_close(db);
 db = NULL;  // Good practice
 ```
 */
void paraglob_close(struct paraglob_db *db);

/*
 Find all patterns that match the input text

 Searches the input text and returns pattern IDs for all glob patterns
 that match. Matching runs in O(n) time where n is the text length.

 # Parameters
 * `db` - Database handle (must not be NULL)
 * `text` - Input text to search, null-terminated (must not be NULL)
 * `result_count` - Pointer to receive match count (must not be NULL)

 # Returns
 * Heap-allocated array of pattern IDs (must be freed with paraglob_free_results)
 * NULL if no matches found (*result_count will be 0)
 * NULL on error (*result_count undefined)

 # Safety
 * `db` must be a valid handle
 * `text` must be a valid null-terminated C string
 * `result_count` must be a valid pointer

 # Example
 ```c
 size_t count = 0;
 int* matches = paraglob_find_all(db, "test.txt", &count);
 if (matches) {
     for (size_t i = 0; i < count; i++) {
         printf("Pattern %d matched\n", matches[i]);
     }
     paraglob_free_results(matches);
 }
 ```
 */
int *paraglob_find_all(struct paraglob_db *db, const char *text, size_t *result_count);

/*
 Free search results array

 Frees the array returned by paraglob_find_all(). Safe to call with NULL.

 # Parameters
 * `results` - Array returned by paraglob_find_all() (may be NULL)

 # Safety
 * `results` must be NULL or a pointer returned from paraglob_find_all()
 * Must not be called twice on the same pointer

 # Example
 ```c
 int* matches = paraglob_find_all(db, "test.txt", &count);
 // ... use matches ...
 paraglob_free_results(matches);
 ```
 */
void paraglob_free_results(int *results);

/*
 Get number of patterns in the database

 Returns the total count of glob patterns stored in the database.

 # Parameters
 * `db` - Database handle (must not be NULL)

 # Returns
 * Number of patterns in database
 * 0 if db is NULL or invalid

 # Safety
 * `db` must be a valid handle

 # Example
 ```c
 size_t count = paraglob_pattern_count(db);
 printf("Database contains %zu patterns\n", count);
 ```
 */
size_t paraglob_pattern_count(const struct paraglob_db *db);

/*
 Get database binary format version

 Returns the version number of the binary format used by this database.

 # Parameters
 * `db` - Database handle (must not be NULL)

 # Returns
 * Format version number (e.g., 1, 2, 3...)
 * 0 if db is NULL or invalid

 # Safety
 * `db` must be a valid handle

 # Example
 ```c
 uint32_t version = paraglob_version(db);
 printf("Binary format version: %u\n", version);
 ```
 */
uint32_t paraglob_version(const struct paraglob_db *db);

/*
 Create a new pattern builder

 Creates a builder for incrementally adding patterns before compilation.
 After adding all patterns, call paraglob_builder_compile() to create
 a usable database.

 # Parameters
 * `case_sensitive` - If non-zero, matching will be case-sensitive

 # Returns
 * Non-null pointer to builder on success
 * NULL on allocation failure

 # Safety
 * Returned pointer must be freed with paraglob_builder_free() or
   consumed with paraglob_builder_compile()

 # Example
 ```c
 paraglob_builder* builder = paraglob_builder_new(1);  // case-sensitive
 if (builder == NULL) {
     fprintf(stderr, "Failed to create builder\n");
     return 1;
 }
 ```
 */
struct paraglob_builder *paraglob_builder_new(int case_sensitive);

/*
 Add a pattern to the builder

 Adds a glob pattern to the builder. Patterns are deduplicated.
 Must call paraglob_builder_compile() after adding all patterns.

 # Parameters
 * `builder` - Builder handle (must not be NULL)
 * `pattern` - Glob pattern string, null-terminated (must not be NULL)

 # Returns
 * PARAGLOB_SUCCESS (0) on success
 * Error code < 0 on failure

 # Safety
 * `builder` must be a valid handle from paraglob_builder_new()
 * `pattern` must be a valid null-terminated C string

 # Example
 ```c
 paraglob_builder* builder = paraglob_builder_new(1);
 paraglob_builder_add(builder, "*.txt");
 paraglob_builder_add(builder, "*.log");
 paraglob_builder_add(builder, "data_*");
 paraglob_db* db = paraglob_builder_compile(builder);
 ```
 */
enum paraglob_error_t paraglob_builder_add(struct paraglob_builder *builder, const char *pattern);

/*
 Compile builder into a usable database

 Finalizes the pattern builder and creates a compiled database ready
 for matching. This consumes the builder - it cannot be used after
 this call succeeds.

 # Parameters
 * `builder` - Builder handle (must not be NULL)

 # Returns
 * Non-null pointer to compiled database on success
 * NULL on compilation failure (builder is still freed)

 # Safety
 * `builder` must be a valid handle from paraglob_builder_new()
 * `builder` must not be used after this call (even if NULL is returned)

 # Example
 ```c
 paraglob_builder* builder = paraglob_builder_new(1);
 paraglob_builder_add(builder, "*.txt");
 paraglob_builder_add(builder, "*.log");

 paraglob_db* db = paraglob_builder_compile(builder);
 // builder is now invalid - don't use it

 if (db == NULL) {
     fprintf(stderr, "Failed to compile patterns\n");
     return 1;
 }

 // Use db...
 paraglob_close(db);
 ```
 */
struct paraglob_db *paraglob_builder_compile(struct paraglob_builder *builder);

/*
 Free a pattern builder without compiling

 Frees a builder if you decide not to compile it. If you call
 paraglob_builder_compile(), you don't need to call this.

 # Parameters
 * `builder` - Builder handle (may be NULL)

 # Safety
 * `builder` must be NULL or a valid handle from paraglob_builder_new()
 * `builder` must not be used after this call
 * Calling with NULL is safe (no-op)

 # Example
 ```c
 paraglob_builder* builder = paraglob_builder_new(1);
 // ... decide not to use it ...
 paraglob_builder_free(builder);
 builder = NULL;
 ```
 */
void paraglob_builder_free(struct paraglob_builder *builder);

/*
 Save a database to a file

 Writes the compiled database to a binary file that can be loaded
 later with paraglob_open_mmap() for instant startup.

 # Parameters
 * `db` - Database handle (must not be NULL)
 * `filename` - Path where file should be written (must not be NULL)

 # Returns
 * PARAGLOB_SUCCESS (0) on success
 * Error code < 0 on failure

 # Safety
 * `db` must be a valid handle
 * `filename` must be a valid null-terminated C string

 # Example
 ```c
 paraglob_builder* builder = paraglob_builder_new(1);
 paraglob_builder_add(builder, "*.txt");
 paraglob_db* db = paraglob_builder_compile(builder);

 if (paraglob_save(db, "patterns.pgb") != PARAGLOB_SUCCESS) {
     fprintf(stderr, "Failed to save database\n");
 }

 paraglob_close(db);
 ```
 */
enum paraglob_error_t paraglob_save(const struct paraglob_db *db, const char *filename);

/*
 Get buffer pointer and size from database

 Returns a pointer to the internal binary buffer and its size.
 This is useful for embedding the database or writing it manually.

 # Parameters
 * `db` - Database handle (must not be NULL)
 * `size` - Pointer to receive buffer size (must not be NULL)

 # Returns
 * Pointer to buffer on success
 * NULL on failure

 # Safety
 * `db` must be a valid handle
 * `size` must be a valid pointer
 * The returned buffer is owned by `db` - do not free it
 * The buffer is valid until `db` is closed

 # Example
 ```c
 paraglob_db* db = ...; // build from patterns
 size_t size = 0;
 const uint8_t* buffer = paraglob_get_buffer(db, &size);
 if (buffer) {
     // Write to custom storage
     fwrite(buffer, 1, size, output_file);
 }
 paraglob_close(db);
 ```
 */
const uint8_t *paraglob_get_buffer(const struct paraglob_db *db, uintptr_t *size);

#ifdef __cplusplus
} // extern "C"
#endif // __cplusplus

#ifdef __cplusplus
} // namespace paraglob_rs
#endif // __cplusplus

#endif /* PARAGLOB_RS_H */
