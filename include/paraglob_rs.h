/* Auto-generated by cbindgen - DO NOT EDIT */

#ifndef PARAGLOB_RS_H
#define PARAGLOB_RS_H

/* Generated with cbindgen:0.26.0 */

/* WARNING: This file is auto-generated. Manual changes will be lost. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

/*
 Error codes for C API
 */
typedef enum paraglob_error_t {
  /*
   Operation succeeded
   */
  paraglob_error_t_PARAGLOB_SUCCESS = 0,
  /*
   File not found
   */
  paraglob_error_t_PARAGLOB_ERROR_FILE_NOT_FOUND = -1,
  /*
   Invalid file format
   */
  paraglob_error_t_PARAGLOB_ERROR_INVALID_FORMAT = -2,
  /*
   Corrupt data
   */
  paraglob_error_t_PARAGLOB_ERROR_CORRUPT_DATA = -3,
  /*
   Out of memory
   */
  paraglob_error_t_PARAGLOB_ERROR_OUT_OF_MEMORY = -4,
  /*
   Invalid parameter
   */
  paraglob_error_t_PARAGLOB_ERROR_INVALID_PARAM = -5,
  /*
   File too small
   */
  paraglob_error_t_PARAGLOB_ERROR_FILE_TOO_SMALL = -6,
  /*
   I/O error
   */
  paraglob_error_t_PARAGLOB_ERROR_IO = -7,
} paraglob_error_t;

/*
 Opaque database handle for C API

 This wraps a `Box<MmapFile>` but is opaque to C clients.
 */
typedef struct paraglob_db {
  uint8_t _private[0];
} paraglob_db;

/*
 Open database from file using memory mapping

 Opens and validates a paraglob file, returning a handle that can be used
 for queries. The file is memory-mapped for efficient zero-copy access.

 # Parameters
 * `filename` - Path to the paraglob file (null-terminated C string)
 * `error_out` - Optional pointer to store error code on failure

 # Returns
 * Non-null pointer on success
 * NULL on failure (check error_out for details)

 # Safety
 * `filename` must be a valid null-terminated C string
 * `error_out` must be NULL or a valid pointer

 # Example
 ```c
 paraglob_error_t error;
 paraglob_db* db = paraglob_open_mmap("/path/to/file.paraglob", &error);
 if (db == NULL) {
     fprintf(stderr, "Failed to open: error %d\n", error);
     return 1;
 }
 ```
 */
struct paraglob_db *paraglob_open_mmap(const char *filename, enum paraglob_error_t *error_out);

/*
 Close database and free all resources

 Closes the memory-mapped file and frees all associated resources.
 After this call, the handle is invalid and must not be used.

 # Safety
 * `db` must be a valid handle returned from `paraglob_open_mmap`
 * `db` must not be used after this call
 * Calling with NULL is safe (no-op)

 # Example
 ```c
 paraglob_close(db);
 db = NULL;  // Good practice
 ```
 */
void paraglob_close(struct paraglob_db *db);

/*
 Get the size of the memory-mapped file in bytes

 # Safety
 * `db` must be a valid handle from `paraglob_open_mmap`

 # Returns
 Size in bytes, or 0 if db is NULL
 */
uintptr_t paraglob_get_size(const struct paraglob_db *db);

/*
 Check if the database is a full Paraglob file (vs AC-only)

 # Safety
 * `db` must be a valid handle from `paraglob_open_mmap`

 # Returns
 * 1 if this is a full Paraglob file
 * 0 if this is an AC-only file or db is NULL
 */
int32_t paraglob_is_paraglob(const struct paraglob_db *db);

#endif /* PARAGLOB_RS_H */
