/* Matchy - Fast Database for IP and Pattern Matching */

#ifndef MATCHY_H
#define MATCHY_H

/* Generated with cbindgen:0.29.0 */

/* WARNING: Auto-generated by cbindgen. Do not edit manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

#ifdef __cplusplus
namespace matchy {
#endif  // __cplusplus

/*
 Library major version
 */
#define VERSION_MAJOR 0

/*
 Library minor version
 */
#define VERSION_MINOR 1

/*
 Library patch version
 */
#define VERSION_PATCH 0

/*
 Current format version (v3: adds AC literal mapping for zero-copy loading)
 */
#define VERSION 3

/*
 Previous format version (v2: adds data section support)
 */
#define VERSION_V2 2

/*
 Previous format version (v1: patterns only, no data)
 */
#define VERSION_V1 1

/*
 Success code
 */
#define MATCHY_SUCCESS 0

/*
 File not found error
 */
#define MATCHY_ERROR_FILE_NOT_FOUND -1

/*
 Invalid format error
 */
#define MATCHY_ERROR_INVALID_FORMAT -2

/*
 Corrupt data error
 */
#define MATCHY_ERROR_CORRUPT_DATA -3

/*
 Out of memory error
 */
#define MATCHY_ERROR_OUT_OF_MEMORY -4

/*
 Invalid parameter error
 */
#define MATCHY_ERROR_INVALID_PARAM -5

/*
 I/O error
 */
#define MATCHY_ERROR_IO -6

/*
 Opaque database builder handle
 */
typedef struct matchy_builder_t {
  uint8_t _private[0];
} matchy_builder_t;

/*
 Opaque database handle
 */
typedef struct matchy_t {
  uint8_t _private[0];
} matchy_t;

/*
 Query result
 */
typedef struct matchy_result_t {
  /*
   Whether a match was found
   */
  bool found;
  /*
   JSON string of the result data (null-terminated, caller must free with matchy_free_string)
   */
  char *data_json;
  /*
   Network prefix length (for IP results)
   */
  uint8_t prefix_len;
} matchy_result_t;

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

/*
 Create a new database builder

 # Returns
 * Non-null pointer on success
 * NULL on allocation failure

 # Example
 ```c
 matchy_builder_t *builder = matchy_builder_new();
 if (builder == NULL) {
     fprintf(stderr, "Failed to create builder\n");
     return 1;
 }
 ```
 */
struct matchy_builder_t *matchy_builder_new(void);

/*
 Add an entry with associated data (as JSON)

 Automatically detects whether the key is an IP address, CIDR range, or pattern.

 # Parameters
 * `builder` - Builder handle (must not be NULL)
 * `key` - IP address, CIDR, or pattern (null-terminated C string, must not be NULL)
 * `json_data` - Associated data as JSON (null-terminated C string, must not be NULL)

 # Returns
 * MATCHY_SUCCESS (0) on success
 * Error code < 0 on failure

 # Safety
 * `builder` must be a valid pointer from matchy_builder_new
 * `key` must be a valid null-terminated C string
 * `json_data` must be a valid null-terminated C string containing valid JSON

 # Example
 ```c
 matchy_builder_add(builder, "1.2.3.4", "{\"threat_level\": \"high\"}");
 matchy_builder_add(builder, "10.0.0.0/8", "{\"type\": \"internal\"}");
 matchy_builder_add(builder, "*.evil.com", "{\"category\": \"malware\"}");
 ```
 */
int32_t matchy_builder_add(struct matchy_builder_t *builder, const char *key, const char *json_data);

/*
 Set database description

 # Parameters
 * `builder` - Builder handle (must not be NULL)
 * `description` - Description text (null-terminated C string, must not be NULL)

 # Returns
 * MATCHY_SUCCESS (0) on success
 * Error code < 0 on failure

 # Safety
 * `builder` must be a valid pointer from matchy_builder_new
 * `description` must be a valid null-terminated C string
 */
int32_t matchy_builder_set_description(struct matchy_builder_t *builder, const char *description);

/*
 Build and save database to file

 # Parameters
 * `builder` - Builder handle (must not be NULL)
 * `filename` - Path where file should be written (null-terminated C string, must not be NULL)

 # Returns
 * MATCHY_SUCCESS (0) on success
 * Error code < 0 on failure

 # Safety
 * `builder` must be a valid pointer from matchy_builder_new
 * `filename` must be a valid null-terminated C string

 # Example
 ```c
 if (matchy_builder_save(builder, "threats.db") != MATCHY_SUCCESS) {
     fprintf(stderr, "Failed to save database\n");
 }
 ```
 */
int32_t matchy_builder_save(struct matchy_builder_t *builder, const char *filename);

/*
 Build and return database in memory

 # Parameters
 * `builder` - Builder handle (must not be NULL)
 * `buffer` - Pointer to receive the buffer pointer (must not be NULL)
 * `size` - Pointer to receive the buffer size (must not be NULL)

 # Returns
 * MATCHY_SUCCESS (0) on success
 * Error code < 0 on failure

 # Safety
 * `builder` must be a valid pointer from matchy_builder_new
 * `buffer` and `size` must be valid pointers
 * Caller must free the returned buffer with libc::free()

 # Example
 ```c
 uint8_t *buffer = NULL;
 size_t size = 0;
 if (matchy_builder_build(builder, &buffer, &size) == MATCHY_SUCCESS) {
     // Use buffer...
     free(buffer);
 }
 ```
 */
int32_t matchy_builder_build(struct matchy_builder_t *builder, uint8_t **buffer, uintptr_t *size);

/*
 Free builder

 # Parameters
 * `builder` - Builder handle (may be NULL)

 # Safety
 * `builder` must be NULL or a valid pointer from matchy_builder_new
 * Must not be used after calling this function
 * Calling with NULL is safe (no-op)
 */
void matchy_builder_free(struct matchy_builder_t *builder);

/*
 Open database from file (memory-mapped)

 Opens a database file using memory mapping for optimal performance.
 The file is not loaded into memory - it's accessed on-demand.

 # Parameters
 * `filename` - Path to database file (null-terminated C string, must not be NULL)

 # Returns
 * Non-null pointer on success
 * NULL on failure

 # Safety
 * `filename` must be a valid null-terminated C string

 # Example
 ```c
 matchy_t *db = matchy_open("threats.db");
 if (db == NULL) {
     fprintf(stderr, "Failed to open database\n");
     return 1;
 }
 ```
 */
struct matchy_t *matchy_open(const char *filename);

/*
 Open database from memory buffer (zero-copy)

 Creates a database handle from a memory buffer. No data is copied.

 # Parameters
 * `buffer` - Pointer to database data (must not be NULL)
 * `size` - Size of buffer in bytes (must be > 0)

 # Returns
 * Non-null pointer on success
 * NULL on failure

 # Safety
 * `buffer` must be valid for the lifetime of the database handle
 * Caller must not modify or free buffer while handle exists
 */
struct matchy_t *matchy_open_buffer(const uint8_t *buffer, uintptr_t size);

/*
 Close database

 Closes the database and frees all associated resources.

 # Parameters
 * `db` - Database handle (may be NULL)

 # Safety
 * `db` must be NULL or a valid pointer from matchy_open
 * Must not be used after calling this function
 * Calling with NULL is safe (no-op)

 # Example
 ```c
 matchy_close(db);
 db = NULL;  // Good practice
 ```
 */
void matchy_close(struct matchy_t *db);

/*
 Unified query interface - automatically detects IP vs pattern

 Queries the database with an IP address or pattern. The function automatically
 detects the query type and uses the appropriate lookup method.

 # Parameters
 * `db` - Database handle (must not be NULL)
 * `query` - IP address or pattern to search (null-terminated C string, must not be NULL)

 # Returns
 * matchy_result_t with found=true if match found
 * matchy_result_t with found=false if no match
 * Caller must free result with matchy_free_result

 # Safety
 * `db` must be a valid pointer from matchy_open
 * `query` must be a valid null-terminated C string

 # Example
 ```c
 matchy_result_t result = matchy_query(db, "1.2.3.4");
 if (result.found && result.data_json) {
     printf("Found: %s\n", result.data_json);
     matchy_free_result(&result);
 }
 ```
 */
struct matchy_result_t matchy_query(const struct matchy_t *db, const char *query);

/*
 Free query result

 Frees the memory allocated for a query result.

 # Parameters
 * `result` - Pointer to result from matchy_query (must not be NULL)

 # Safety
 * `result` must be a valid pointer to a result from matchy_query
 * Must not be called twice on the same result
 */
void matchy_free_result(struct matchy_result_t *result);

/*
 Free a string returned by matchy

 # Parameters
 * `string` - String pointer returned by matchy (may be NULL)

 # Safety
 * `string` must be NULL or a pointer returned by matchy
 * Must not be called twice on the same pointer
 */
void matchy_free_string(char *string);

/*
 Get library version string

 # Returns
 * Version string (e.g., "0.4.0")
 * Pointer is valid for program lifetime, do not free
 */
const char *matchy_version(void);

#ifdef __cplusplus
}  // extern "C"
#endif  // __cplusplus

#ifdef __cplusplus
}  // namespace matchy
#endif  // __cplusplus

#endif  /* MATCHY_H */
